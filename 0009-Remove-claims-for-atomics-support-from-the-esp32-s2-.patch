From efb0ff38009ef4e04a28c48a0b58c9e607aa8670 Mon Sep 17 00:00:00 2001
From: Ivan Markov <ivan.markov@gmail.com>
Date: Sat, 3 Jul 2021 20:18:45 +0300
Subject: [PATCH 09/13] Remove claims for atomics support from the esp32-s2
 Xtensa target

---
 .../src/spec/xtensa_esp32s2_none_elf.rs           | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/compiler/rustc_target/src/spec/xtensa_esp32s2_none_elf.rs b/compiler/rustc_target/src/spec/xtensa_esp32s2_none_elf.rs
index 6b9e723fbdf..bce3cbd355b 100644
--- a/compiler/rustc_target/src/spec/xtensa_esp32s2_none_elf.rs
+++ b/compiler/rustc_target/src/spec/xtensa_esp32s2_none_elf.rs
@@ -21,7 +21,20 @@ pub fn target() -> Target {
             cpu: "esp32-s2".to_string(),
             linker: Some("xtensa-esp32s2-elf-gcc".to_string()),
 
-            max_atomic_width: Some(32),
+            // See https://github.com/espressif/rust-esp32-example/issues/3#issuecomment-861054477
+            //
+            // Unlike the original ESP32 chip, ESP32-S2 does not really support atomics.
+            // If the missing hardware instruction ends up being emulated in ESP-IDF, we might want to revert
+            // this change and claim that atomics are supported "in hardware" (even though they would be emulated
+            // by actually trapping the illegal instruction exception handler and calling into an ESP-IDF C emulation code).
+            //
+            // However, for now we just expose the reality and hope to provide atomics support with polyfills like
+            // https://github.com/embassy-rs/atomic-polyfill
+            //
+            // The trick with supporting atomics by emulating the missing instruction might anyway be best supported
+            // with a separate, dedicated target.
+            max_atomic_width: Some(0),
+            atomic_cas: false,
 
             // Because these devices have very little resources having an
             // unwinder is too onerous so we default to "abort" because the
-- 
2.17.1

